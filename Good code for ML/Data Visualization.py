# -*- coding: utf-8 -*-
"""Class 5: Exploratory data visualization - master.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rsJQUTWWzxfrZ2zVVaxmGIh6hXZOhH8m

# Import packages
"""

import pandas as pd
import numpy as np
import seaborn as sns

"""# Import, format, and view data"""

# Tutorial this lab is based on -- great spot to start if you want to go further

# Import csv
with open('Pokemon.csv', encoding="utf8", errors='ignore') as f:
    poke_df = pd.read_csv(f)

# Delete index column
del poke_df['#']

poke_df.head()

"""# Histograms"""

# Histogram (or Distribution plot)
sns.distplot(poke_df['HP'])

# Now, edit the number of bins to 50, so we have greater granularity.
# Documentation: https://seaborn.pydata.org/generated/seaborn.distplot.html
sns.distplot(poke_df['HP'], bins=50)

# Only plot the Gaussian kernial density estimate (the line of the distribution) and the rugplot. What does this tell us?
# Documentation: https://seaborn.pydata.org/generated/seaborn.distplot.html
sns.distplot(poke_df['HP'], rug=True, hist=False)

"""# Scatter plot"""

# Is attack positively or negatively correlated with defense? Use a scatterplot overlayed with a linear trendline to answer.
# Documentation: https://seaborn.pydata.org/generated/seaborn.lmplot.html

sns.lmplot(x='Defense', y='Attack', data=poke_df)

"""# Correlation plot"""

# Calculate correlations between the variables. What do the black squares represent?
corr = poke_df.corr()
 
# Heatmap
sns.heatmap(corr)

# Go further to only highlight the negatively correlated variables by setting the color scale maximum to zero.
# Documentation: https://seaborn.pydata.org/generated/seaborn.heatmap.html
corr = poke_df.corr()
 
# Heatmap
sns.heatmap(corr, vmax=0)

"""# Boxplot"""

# Boxplot of the values of HP, Attack, and Defense
sns.boxplot(data=poke_df[['HP', 'Attack', 'Defense']])

# Plot a boxplot of Sp. Atk by each 'Stage.' Use the 'hue' parameter to separate 'Legendary' pokemon. 
sns.boxplot(data=poke_df, x='Stage', y='Sp. Atk', hue='Legendary')

"""# Factor plot"""

# Factor Plot
g = sns.factorplot(x='Stage', 
                   y='Attack', 
                   data=poke_df, 
                   col='Legendary',
                   kind='swarm')
 
# Rotate x-axis labels
g.set_xticklabels(rotation=0)

"""# Violin factor plot"""

# Change the 'kind' of the factorplot to make a violin plot. How does this compare to the swarm plot?
g = sns.factorplot(x='Stage', 
                   y='Attack', 
                   data=poke_df, 
                   col='Legendary',
                   kind='violin')
 
# Rotate x-axis labels
g.set_xticklabels(rotation=0)

# Add a hue parameter to make the color based on 'Legendary' instead of 'Stage'
g = sns.factorplot(x='Stage', 
                   y='Attack', 
                   data=poke_df, 
                   col='Legendary',
                   hue='Legendary',
                   kind='violin')
 
# Rotate x-axis labels
g.set_xticklabels(rotation=0)

