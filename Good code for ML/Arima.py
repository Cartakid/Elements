# -*- coding: utf-8 -*-
"""ARIMA - master.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FAbcDQE6ncmhnEycTKGTTH_4aSvSQDkf

# Import packages
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

"""# Import data"""

# Import data from URL and add column names
# https://archive.ics.uci.edu/ml/machine-learning-databases/00360/
air_df = pd.read_csv('AirQualityUCI.csv', sep = ';', na_values = '', decimal = ',', parse_dates=[['Date', 'Time']])

# auto_df.columns = [
#  'symboling'
# ]

"""# Data Cleaning"""

air_df.head()

air_df.tail()

air_df['Unnamed: 15'].value_counts()

air_df['Unnamed: 16'].value_counts()

# Drop empty columns
air_df.drop(columns=['Unnamed: 15', 'Unnamed: 16'], inplace=True)

air_df.isna().sum

air_df.shape

# Drop NA rows
air_df.dropna(thresh=2, inplace=True)

air_df.shape

# This shows there were 114 rows with all NAs and no other NAs in the dataframe
9471 - 9357

air_df.dtypes

# Convert Date_Time from object to datetime
air_df['Date_Time'] = pd.to_datetime(air_df['Date_Time'], format='%d/%m/%Y %H.%M.%S')

air_df['Date_Time'].dtype

# Check out the "trend"
sns.lineplot(x="Date_Time", y='AH', data=air_df.head(500))

# Limit df to only the columns we care about
final_df = air_df[['Date_Time', 'AH']]

# Set the datetime as the df index (useful for ARIMA function later)
final_df.set_index('Date_Time', inplace=True)

final_df.head()

# Split into train and test (going to and predict next 24 hours)
split_point = len(final_df) - 24
y_train, y_test = final_df[0:split_point], final_df[split_point:]

print(len(y_train))
print(len(y_test))

y_train.head()

"""# Modeling"""

from pandas import datetime
from matplotlib import pyplot
from pandas.tools.plotting import autocorrelation_plot
 
# This plot shows the correlation between successive observations
autocorrelation_plot(y_train.head(500))
pyplot.show()

from statsmodels.tsa.arima_model import ARIMA
from matplotlib import pyplot

# Fit AR model
model = ARIMA(y_train, order=(1, 0, 0))
armodel_fit = model.fit(disp=0)
print(armodel_fit.summary())
# plot residual errors
residuals = pd.DataFrame(armodel_fit.resid)
residuals.plot()
pyplot.show()
residuals.plot(kind='kde')
pyplot.show()
print(residuals.describe())

from statsmodels.tsa.arima_model import ARIMA
from matplotlib import pyplot

# Fit ARIMA model
model = ARIMA(y_train, order=(4, 1, 1))
model_fit = model.fit(disp=0)
print(model_fit.summary())
# plot residual errors
residuals = pd.DataFrame(model_fit.resid)
residuals.plot()
pyplot.show()
residuals.plot(kind='kde')
pyplot.show()
print(residuals.describe())

start_index = '2005-04-03 15:00:00'
end_index = '2005-04-04 14:00:00'
arforecast = armodel_fit.predict(start=start_index, end=end_index)

start_index = '2005-04-03 15:00:00'
end_index = '2005-04-04 14:00:00'
forecast = model_fit.predict(start=start_index, end=end_index)

# Plot of original data and predictions
sns.lineplot(x=forecast.index, y=forecast)
sns.lineplot(x=arforecast.index, y=arforecast)
sns.lineplot(x=y_test.index, y=y_test['AH'])
sns.lineplot(x=y_train.tail(24).index, y=y_train['AH'].tail(24))

import statistics as stats
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from math import sqrt

forecast_errors = [y_test['AH'][i]-forecast[i] for i in range(len(y_test))]
print('Forecast Errors: %s' % forecast_errors)

print('\nMean Error:')
print(stats.mean(forecast_errors))

print('\nAbsolute Mean Error:')
print(mean_absolute_error(y_test['AH'], forecast))

print('\nRoot Mean Squared Error:')
print(sqrt(mean_squared_error(y_test['AH'], forecast)))

"""Resources to use for mini-project: 
- https://www.statsmodels.org/devel/generated/statsmodels.tsa.arima_model.ARIMA.html
- https://machinelearningmastery.com/arima-for-time-series-forecasting-with-python/
- https://machinelearningmastery.com/time-series-forecasting-performance-measures-with-python/
- https://machinelearningmastery.com/make-sample-forecasts-arima-python/
"""