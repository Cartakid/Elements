# -*- coding: utf-8 -*-
"""Class 9: Logistic regression - master.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XnZv6nkzgbQvM4Yrq33yq15tLyP5ijuZ

# Import packages
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
import seaborn as sns

"""# Import data"""

# Import data from URL and add column names
thyroid_df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/thyroid-disease/new-thyroid.data', header = None)
thyroid_df.columns = ['class', 't3_resin', 'isotopic', 'radioimmuno', 'tsh', 'tsh_diff']

"""# Data transformation to binary classifier"""

thyroid_df['class'].replace(1, 0, inplace = True)
thyroid_df['class'].replace(3, 0, inplace = True)
thyroid_df['class'].replace(2, 1, inplace = True)

thyroid_df.head()

thyroid_df['class'].value_counts()

# Separate labels, so we don't scale the categorical values
thyroid_features = thyroid_df.iloc[:, 1:]
thyroid_labels = thyroid_df.iloc[:,0]

"""# Fit logistic regression function"""

# instantiate the model (using the default parameters)
logreg = LogisticRegression()

# fit the model with data
lr_simple = logreg.fit(thyroid_features.iloc[:, 4:], thyroid_labels)

# Coefficients of fitted model
lr_simple.coef_

# Intercept of fitted model
lr_simple.intercept_

# instantiate the model (using the default parameters)
logreg = LogisticRegression()

# fit the model with data
lr = logreg.fit(thyroid_features,thyroid_labels)

# Coefficients of fitted model
lr.coef_

# Intercept of fitted model
lr.intercept_

# Calculate correlations between the variables.
corr = thyroid_features.corr()
 
# Heatmap
sns.heatmap(corr)

"""# Plot sigmoid function"""

import matplotlib.pyplot as plt
x_simple = thyroid_features.iloc[:, 4:]
x_space = np.linspace(-5, 10, 100)
def model(x):
    return 1 / (1 + np.exp(-x))

loss = model(x_space * lr_simple.coef_ + lr_simple.intercept_).ravel()
plt.plot(x_space, loss, color='red', linewidth=3)
plt.scatter(thyroid_features['tsh_diff'].ravel(), thyroid_labels, color='black', zorder=20)

sns.distplot(thyroid_df['tsh_diff'])