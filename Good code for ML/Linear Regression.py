# -*- coding: utf-8 -*-
"""Linear regression - master.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZPjGiOWUk3dynw7UECMnJ3A2DvgJfM8H

# Intro to Linear Regression

- Simple linear regression
- multiple linear regression
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
import seaborn as sns
from math import sqrt
# %matplotlib inline

"""## import data"""

diabetes = datasets.load_diabetes()

"""Data source:
http://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf
"""

diabetes_df = pd.DataFrame(data=diabetes.data, columns=diabetes.feature_names)

diabetes_df.head()

"""recoding sex variable"""

diabetes_df['sex'].value_counts()

diabetes_df['sex'] = np.where(diabetes_df['sex'] > 0, 1,0)

diabetes_df['sex'].value_counts()

diabetes_df.describe()

y = pd.DataFrame(data=diabetes.target, columns=['disease'])

y.describe()

"""## initial viz

Plotting our Label against BMI, can you see a linear relationship?
"""

sns.scatterplot(x=diabetes_df['bmi'].values, y=y.values.ravel(), )

sns.jointplot(x=diabetes_df['bmi'], y=y.values.ravel(), kind='reg')

"""## Preparing our data"""

X_train, X_test, y_train, y_test = train_test_split(diabetes_df, y, test_size=0.20, random_state=42)

X_train.shape

X_test.shape

"""## Simple linear regression"""

!pip install statsmodels

import statsmodels.api as sm
from statsmodels.sandbox.regression.predstd import wls_prediction_std

X_train = sm.add_constant(X_train)
simple_model = sm.OLS(y_train,X_train[['bmi','const']])

simple_result = simple_model.fit()

print(simple_result.summary())

X_test = sm.add_constant(X_test)
y_pred_simple = simple_result.predict(X_test[['bmi','const']])

sns.scatterplot(x = X_test['bmi'], y = y_test.values.ravel())
sns.lineplot(x = X_test['bmi'] , y = y_pred_simple)
plt.title('Regression plot')

sns.scatterplot(x = y_pred_simple, y = (y_pred_simple- y_test.values.ravel()))
plt.hlines(y=0, xmin=50, xmax=340)
plt.title('Residual plot')

"""## Multiple linear regression"""

multiple_model = sm.OLS(y_train,X_train)

multiple_result = multiple_model.fit()

print(multiple_result.summary())

